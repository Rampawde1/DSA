class Solution {
    public List<Integer> eventualSafeNodes(int[][] graph) {
        ArrayList<Integer> res = new ArrayList<>();
        vis = new int[graph.length];
        
        for(int i = 0; i < graph.length; i++){
            boolean safe = dfs(graph, i);
            if(safe){
                res.add(i);
            }
        }
        return res;
    }
    public boolean dfs(int[][] graph, int u){
        if(vis[u] == 2){
            return true;
        } else if(vis[u] == 1){
            return false;
        } else{
            vis[u] = 1;
            
            for(int x : graph[u]){
                boolean safe = dfs(graph, x);
                if(!safe){
                    return false;
                }
            }
            vis[u] = 2;
            
            return true;
        }
    }
    int[] vis;
}
