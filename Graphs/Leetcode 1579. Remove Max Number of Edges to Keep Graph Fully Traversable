class Solution {
    public int maxNumEdgesToRemove(int n, int[][] edges) {
        int[] p = new int[n + 1];
        int[] r = new int[n + 1];
        
        for(int i = 1; i < p.length; i++){
            p[i] = i;
            r[i] = 0;
        }
        int res = 0;
        int a1 = 0;
        int b1 = 0;
        
        for(int[] edge : edges){
            if(edge[0] == 3){
                boolean flag = union(p, r, edge[1], edge[2]);
                if(flag){
                    a1++;
                    b1++;
                } else{
                    res++;
                }
            }
        }
        int[] p1 = p.clone();
        int[] r1 = r.clone();
        
        for(int[] edge : edges){
            if(edge[0] == 1){
                boolean flag = union(p1, r1, edge[1], edge[2]);
                if(flag){
                    a1++;
                } else{
                    res++;
                }
            }
        }
        int[] p2 = p.clone();
        int[] r2 = r.clone();
        
        for(int[] edge : edges){
            if(edge[0] == 2){
                boolean flag = union(p2, r2, edge[1], edge[2]);
                if(flag){
                    b1++;
                } else{
                    res++;
                }
            }
        }
        if(a1 == n - 1 && b1 == n - 1){
            return res;
        } else{
            return -1;
        }

    }
    int find(int[] p, int x){
        if(p[x] == x){
            return x;
        } else{
            p[x] = find(p, p[x]);
            return p[x];
        }
    }
    boolean union(int[] p, int[] r, int X, int Y){
         int x = find(p, X);
        int y = find(p, Y);
        
        if(x == y){
            return false;
        }
        if(r[x] < r[y]){
            p[x] = y;
        } else if(r[y] < r[x]){
                p[y] = x;
            } else{
                p[y] = x;
                r[x]++;
            }
            return true;
        }
    }
