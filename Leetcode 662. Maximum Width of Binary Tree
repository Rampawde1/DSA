class Solution {
    class pair{
        long min;
        long max;
    }
    long maxW = 0;
    public int widthOfBinaryTree(TreeNode root) {
        HashMap<Integer, pair> map = new HashMap<>();
        
        maxW = 0;
        helper(root, 1, 1, map);
        return (int)maxW;
    }
    public void helper(TreeNode node, int level, long idx, HashMap<Integer, pair> map){
        if(node == null){
            return;
        }
        helper(node.left, level + 1, 2*idx, map);
        helper(node.right, level + 1, 2*idx + 1, map);
        
        pair p =  null;
        
        if(map.containsKey(level)){
            p = map.get(level);
            //p.min = Math.min(p.min, idx);
            //p.max = Math.min(p.max, idx);
            p.max = idx;  
           
        }
        else{
            p = new pair();
            p.min = idx;
            p.max = idx;
            map.put(level, p);
        }
        long width = p.max - p.min + 1;
        if(width > maxW){
            maxW = width;
        }
    }
}
