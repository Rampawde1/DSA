class Solution {
    public boolean canReorderDoubled(int[] arr) {
     TreeMap<Integer, Integer> map = new TreeMap<>();
        for(int val: arr){
            map.put(val, map.getOrDefault(val, 0) + 1);
        }
        for(int key: map.keySet()){
            if(map.get(key) == 0){
                continue;
            }
            int reqd = 0;
            
            if(key < 0){
                if(key % 2 != 0){
                    return false;
                } else{
                    reqd = key / 2;
                }
            } else{
                reqd = key * 2;
            }
            if(map.getOrDefault(reqd, 0) < map.get(key)){
                return false;
            } else{
                map.put(reqd, map.get(reqd) - map.get(key));
            }
        }
        return true;
    }
}
--------------------------------------------------------------------------------------------------------------
class Solution {
    public int numberOfSubarrays(int[] nums, int k) {
        int res = 0;
        
        int[] map = new int[nums.length + 1];
        map[0] = 1;
        
        int count = 0;
        for(int i = 0; i < nums.length; i++){
            if(nums[i] % 2 == 1){
                count++;
            }
            
            if(count >= k){
                res += map[count - k];
            }
            map[count]++;
        }
        
        return res;
    }
}
