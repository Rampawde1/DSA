class Solution {
   
    public int climbStairs(int n){
        int [] dp = new int[n + 1];
        return countSteps(n, dp);
    }
        //Method 1 ->By Recurssion & Memoization 
    //     private int countSteps(int n, int [] dp) {
    //     if(n == 0){
    //        return dp[n] = 1; 
    //     }
    //     if(dp[n] != 0){
    //         return dp[n];
    //     }
    //     int count = 0;
    //     if(n - 1 >= 0){
    //         count += countSteps(n - 1, dp);
    //     }
    //     if(n - 2 >= 0){
    //         count += countSteps(n - 2, dp);
    //     }
    //     return dp[n] = count;
    // }
    //Method 2 ->By Iteration  & tabulation 
        static int countSteps(int N, int [] dp) {
        for(int n = 0; n < dp.length; n++){   
        if(n == 0){
           dp[n] = 1;
            continue;
        }
        
        int count = 0;
        if(n - 1 >= 0){
            count += dp[n - 1];
        }
        if(n - 2 >= 0){
            count += dp[n - 2];
        }
        dp[n] = count;
    }
    return dp[N];
        }
    
}
